# SPRING BATCH META-DATA
spring.batch.datasource.url=jdbc:h2:file:~/test;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1
spring.batch.datasource.driverClassName=org.h2.Driver
spring.batch.datasource.username=sa
spring.batch.datasource.password=

# SPRING BATCH (BatchProperties)
#spring.batch.initialize-schema=embedded # Database schema initialization mode.
spring.batch.job.enabled=false # Execute all Spring Batch jobs in the context on startup.
#spring.batch.job.names= # Comma-separated list of job names to execute on startup (for instance, `job1,job2`). By default, all Jobs found in the context are executed.
#spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.
#spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.

#JPA DATASOURCE
spring.jpa.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.datasource.url=jdbc:postgresql://localhost:5432/test
spring.jpa.datasource.username=postgres
spring.jpa.datasource.password=23405444
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
# Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.
spring.jpa.database=default
# Initialize the schema on startup.
spring.jpa.generate-ddl=true
# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.
spring.jpa.hibernate.ddl-auto=create-drop